---
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.vue';
import Footer from '../../components/Footer.astro';
import ProjectCTA from '../../components/ProjectCTA.astro';
import { Image } from 'astro:assets';
import { projectImages } from '../../utils/projectImages';

interface Props {
  project: CollectionEntry<"projects">;
  prevProject: {
    slug: string;
    title: string;
  };
  nextProject: {
    slug: string;
    title: string;
  };
}

export async function getStaticPaths() {
  const projects = await getCollection('projects');
  
  // Projekte sortieren für Prev/Next Navigation
  const sortedProjects = [...projects].sort((a, b) => a.data.order - b.data.order);
  
  return sortedProjects.map((project, index) => {
    const prevProject = index > 0 ? sortedProjects[index - 1] : sortedProjects[sortedProjects.length - 1];
    const nextProject = index < sortedProjects.length - 1 ? sortedProjects[index + 1] : sortedProjects[0];
    
    return {
      params: { slug: project.slug },
      props: { 
        project,
        prevProject: {
          slug: prevProject.slug,
          title: prevProject.data.title
        },
        nextProject: {
          slug: nextProject.slug,
          title: nextProject.data.title
        }
      }
    };
  });
}

const { project, prevProject, nextProject } = Astro.props;
const { Content } = await project.render();

// Bestimme den Projektnamen aus dem Bildpfad
const projectKey = project.data.image.split('/').slice(-2)[0].replace('_web', '') as keyof typeof projectImages;
const projectData = projectImages[projectKey];

// Bilder in Gruppen aufteilen für verschiedene Sektionen
const gallery = projectData?.gallery || [];
const imageGroups = {
  topLeft: gallery.slice(0, 3),          // Projects_Top_Left_1-3
  topRight: gallery[3],                  // Projects_Top_Right
  secondRowLeft: gallery[4],             // Second_Row_Left
  secondRowRight: gallery.slice(5, 8),   // Second_Row_Right_1-3
  thirdRowLeft: gallery[8],              // Third_Row_Left
  thirdRowMid: gallery.slice(9, 12),     // Third_Row_Mid_1-3
  thirdRowRight: gallery[12]             // Third_Row_Right
};

// Video-URL aus dem Projekt-Daten
const videoUrl = project.data.videoUrl || '';

export const prerender = true;
---

<Layout title={`${project.data.title} - Fabian Paul`}>
  <Navigation client:load />
  
  <main class="bg-[#1E1E1E] text-[#E5E5E5]">
    <!-- Hero -->
    <section class="min-h-screen relative flex items-center">
      <div class="absolute inset-0">
        {projectData?.header && (
          <Image 
            src={projectData.header}
            alt={project.data.title}
            width={2000}
            height={1000}
            class="w-full h-full object-cover opacity-[0.97]"
            format="webp"
            quality={90}
            style="filter: brightness(0.92) contrast(1.02);"
          />
        )}
        <div class="absolute inset-0 bg-gradient-to-b from-black/40 via-[#1E1E1E]/50 to-[#1E1E1E]"></div>
      </div>

      <div class="relative z-10 container mx-auto px-8 pt-32">
        <div class="max-w-4xl flex flex-col gap-[clamp(16px,2.5vw,24px)]">
          <span class="text-[#0F0] text-sm uppercase tracking-wider font-light">
            Projekt / {new Date().getFullYear()}
          </span>
          
          <div class="flex flex-col gap-[clamp(8px,1.5vw,12px)]">
            <h1 class="text-[clamp(2.5rem,8vw,5rem)] font-medium leading-[0.9] tracking-tight">
              {project.data.title}
            </h1>
            <p class="text-[clamp(1rem,2vw,1.25rem)] font-light italic max-w-2xl text-[#E5E5E5]/90">
              {project.data.description}
            </p>
          </div>
          
          <div class="flex flex-wrap gap-[clamp(8px,1vw,10px)]">
            {project.data.tags.map((tag: string) => (
              <span class="px-5 py-2.5 rounded-full border-2 border-[#E5E5E5]/20 text-[#E5E5E5]/80 text-sm uppercase tracking-wide hover:border-[#E5E5E5]/40 hover:text-[#E5E5E5] transition-all duration-300">
                {tag}
              </span>
            ))}
          </div>
        </div>
      </div>
    </section>

    <!-- Gallery Container -->
    <div class="py-32 px-8">
      <div class="max-w-[1800px] mx-auto space-y-48">
        {project.data.projectType === "video" ? (
          <div class="max-w-4xl mx-auto">
            <!-- Text Content -->
            <article class="prose-custom text-[clamp(1.25rem,2.5vw,1.75rem)] font-light italic mb-16">
              <Content />
            </article>
            
            <!-- Video Player -->
            <div class="aspect-video w-full">
              <video
                controls
                class="w-full h-full object-cover"
              >
                {videoUrl && (
                  <source src={videoUrl} type="video/mp4" />
                )}
                Ihr Browser unterstützt das Video-Tag nicht.
              </video>
            </div>
          </div>
        ) : (
          <>
            <!-- Standard Gallery Layout -->
            <section class="grid grid-cols-1 md:grid-cols-2 gap-24">
              <div class="aspect-[4/3] overflow-hidden relative" data-speed="0.02">
                {imageGroups.topLeft.map((src, index) => (
                  <Image 
                    src={src}
                    alt={`${project.data.title} - Bild ${index + 1}`}
                    width={800}
                    height={600}
                    class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-500 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
                    data-image-group="group1"
                    data-image-index={index}
                    format="webp"
                    quality={85}
                  />
                ))}
              </div>
              <div class="aspect-[4/3] overflow-hidden md:translate-y-24" data-speed="-0.02">
                {imageGroups.topRight && (
                  <Image 
                    src={imageGroups.topRight}
                    alt={`${project.data.title} Detail`}
                    width={800}
                    height={600}
                    class="w-full h-full object-cover"
                    format="webp"
                    quality={85}
                  />
                )}
              </div>
            </section>

            <!-- Text Break -->
            <article class="prose-custom text-[clamp(1.25rem,2.5vw,1.75rem)] font-light italic max-w-3xl">
              <Content />
            </article>

            <!-- Gallery Section 2 -->
            <section class="grid grid-cols-1 md:grid-cols-12 gap-8">
              <div class="md:col-span-8 aspect-video overflow-hidden" data-speed="0.03">
                {imageGroups.secondRowLeft && (
                  <Image 
                    src={imageGroups.secondRowLeft}
                    alt={`${project.data.title} Workspace`}
                    width={1600}
                    height={900}
                    class="w-full h-full object-cover"
                    format="webp"
                    quality={85}
                  />
                )}
              </div>
              <div class="md:col-span-4 aspect-video overflow-hidden md:translate-y-32 relative" data-speed="-0.03">
                {imageGroups.secondRowRight.map((src, index) => (
                  <Image 
                    src={src}
                    alt={`${project.data.title} Details`}
                    width={800}
                    height={450}
                    class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-500 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
                    data-image-group="group2"
                    data-image-index={index}
                    format="webp"
                    quality={85}
                  />
                ))}
              </div>
            </section>

            <!-- Gallery Section 3 -->
            <section class="grid grid-cols-1 md:grid-cols-3 gap-12">
              <div class="aspect-[3/4] overflow-hidden" data-speed="0.02">
                {imageGroups.thirdRowLeft && (
                  <Image 
                    src={imageGroups.thirdRowLeft}
                    alt={`${project.data.title} Detail 1`}
                    width={600}
                    height={800}
                    class="w-full h-full object-cover"
                    format="webp"
                    quality={85}
                  />
                )}
              </div>
              <div class="aspect-[3/4] overflow-hidden md:translate-y-24 relative" data-speed="-0.03">
                {imageGroups.thirdRowMid.map((src, index) => (
                  <Image 
                    src={src}
                    alt={`${project.data.title} Detail 2`}
                    width={600}
                    height={800}
                    class={`absolute inset-0 w-full h-full object-cover transition-opacity duration-500 ${index === 0 ? 'opacity-100' : 'opacity-0'}`}
                    data-image-group="group3"
                    data-image-index={index}
                    format="webp"
                    quality={85}
                  />
                ))}
              </div>
              <div class="aspect-[3/4] overflow-hidden" data-speed="0.02">
                {imageGroups.thirdRowRight && (
                  <Image 
                    src={imageGroups.thirdRowRight}
                    alt={`${project.data.title} Detail 3`}
                    width={600}
                    height={800}
                    class="w-full h-full object-cover"
                    format="webp"
                    quality={85}
                  />
                )}
              </div>
            </section>
          </>
        )}
      </div>
    </div>

    <!-- CTA Section -->
    <ProjectCTA 
      prevProject={prevProject}
      nextProject={nextProject}
    />
  </main>

  <Footer />
</Layout>

<script>
  const initImageSwitching = () => {
    const groups = ['group1', 'group2', 'group3'];
    const currentIndices = {
      group1: 0,
      group2: 0,
      group3: 0
    };

    const switchImage = (group: string) => {
      const images = document.querySelectorAll(`[data-image-group="${group}"]`);
      if (images.length <= 1) return;
      
      const currentIndex = currentIndices[group as keyof typeof currentIndices];
      const nextIndex = (currentIndex + 1) % images.length;

      gsap.to(images[currentIndex], {
        opacity: 0,
        duration: 0.5,
        ease: "power2.inOut"
      });

      gsap.to(images[nextIndex], {
        opacity: 1,
        duration: 0.5,
        ease: "power2.inOut"
      });

      currentIndices[group as keyof typeof currentIndices] = nextIndex;
    };

    groups.forEach((group, index) => {
      if (document.querySelectorAll(`[data-image-group="${group}"]`).length > 1) {
        setInterval(() => switchImage(group), 3000 + (index * 750));
      }
    });
  };

  // Parallax Effect
  const initParallax = () => {
    const parallaxElements = document.querySelectorAll('[data-speed]');
    
    window.addEventListener('scroll', () => {
      parallaxElements.forEach((element: Element) => {
        const speed = parseFloat(element.getAttribute('data-speed') || '0');
        const rect = element.getBoundingClientRect();
        const scrolled = window.pageYOffset;
        
        const yPos = -(scrolled * speed);
        
        // Nur animieren wenn das Element im Viewport ist
        if (rect.top < window.innerHeight && rect.bottom > 0) {
          gsap.to(element, {
            y: yPos,
            duration: 0.5,
            ease: 'none'
          });
        }
      });
    });
  };

  window.addEventListener('load', () => {
    if (typeof gsap === 'undefined') return;
    
    initImageSwitching();
    initParallax(); // Parallax initialisieren
    
    // Hero animations
    gsap.from('h1', {
      y: 100,
      opacity: 0,
      duration: 1,
      ease: 'power3.out'
    });

    gsap.from('h1 + p', {
      y: 50,
      opacity: 0,
      duration: 1,
      delay: 0.3,
      ease: 'power3.out'
    });

    // Scroll animations for images and text
    gsap.utils.toArray('section').forEach((section) => {
      gsap.from((section as Element).children, {
        scrollTrigger: {
          trigger: section as Element,
          start: 'top 80%',
          end: 'bottom 20%',
          toggleActions: 'play none none reverse'
        },
        y: 50,
        opacity: 0,
        duration: 1,
        stagger: 0.2,
        ease: 'power3.out'
      });
    });
  });
</script> 