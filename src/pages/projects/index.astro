---
import Layout from '../../layouts/Layout.astro';
import Navigation from '../../components/Navigation.vue';
import Footer from '../../components/Footer.astro';
import { getCollection, type CollectionEntry } from 'astro:content';

const projects = await getCollection('projects');
const sortedProjects = projects.sort((a: CollectionEntry<'projects'>, b: CollectionEntry<'projects'>) => a.data.order - b.data.order);

// Extrahiere einzigartige Kategorien f端r die Filter
const allCategories: string[] = [...new Set(projects.flatMap(project => project.data.categories))];
---

<Layout title="Projekte - Fabian Paul">
  <Navigation client:load />
  
  <main class="bg-[#1E1E1E] min-h-screen">
    <!-- Header -->
    <div class="pt-48 pb-16 px-8">
      <div class="max-w-[1800px] mx-auto">
        <div class="max-w-4xl flex flex-col gap-[clamp(16px,2.5vw,24px)]">
          <div class="flex flex-col gap-[clamp(8px,1.5vw,12px)]">
            <h1 class="text-fluid-3xl font-medium leading-[0.9] tracking-tight pb-4">
              Projects
            </h1>
            <!-- Filter Section -->
            <div>
              <div class="max-w-[1800px] mx-auto">
                <div class="flex flex-wrap gap-[clamp(8px,1vw,10px)]">
                  <button 
                    class="px-4 py-2 rounded-full border-2 border-[#E5E5E5]/20 text-[#E5E5E5]/80 text-fluid-xs uppercase tracking-wide hover:border-[#E5E5E5]/40 hover:text-[#E5E5E5] transition-all duration-300 filter-btn active"
                    data-filter="all"
                  >
                    Alle
                  </button>
                  {allCategories.map(category => (
                    <button 
                      class="px-4 py-2 rounded-full border-2 border-[#E5E5E5]/20 text-[#E5E5E5]/80 text-fluid-xs uppercase tracking-wide hover:border-[#E5E5E5]/40 hover:text-[#E5E5E5] transition-all duration-300 filter-btn"
                      data-filter={category}
                    >
                      {category === 'auswahl' ? 'Auswahl' : 
                       category === 'branding' ? 'Branding' :
                       category === 'webdesign' ? 'Webdesign' :
                       category === 'packaging' ? 'Packaging' : category}
                    </button>
                  ))}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Projects Container -->
    <div class="px-4 md:px-8 pb-[48px]">
      <div class="max-w-[1800px] mx-auto">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-[clamp(48px,8vw,96px)]">
          {sortedProjects.map((project: CollectionEntry<'projects'>) => (
            <div class={`${project.data.featured ? "md:col-span-2" : ""} space-y-[clamp(16px,3vw,32px)] project-item`} 
                 data-categories={project.data.categories.join(',')}>
              <a href={`/projects/${project.slug}`} class="block group">
                {project.data.projectType === "video" ? (
                  // Spezielles Layout f端r Video-Projekte
                  <div class="aspect-video overflow-hidden">
                    <img 
                      src={project.data.image}
                      alt={project.data.title}
                      class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                    />
                  </div>
                ) : (
                  // Standard-Layout f端r andere Projekte
                  <div class={`aspect-[16/9] overflow-hidden ${project.data.featured && project.data.order !== 2 ? "md:mr-48" : ""}`}>
                    <img 
                      src={project.data.image}
                      alt={project.data.title}
                      class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-105"
                    />
                  </div>
                )}
              </a>
              <div class="flex flex-col gap-[clamp(8px,1.5vw,12px)]">
                <div class="flex flex-col gap-[clamp(8px,1.5vw,12px)]">
                  <h2 class="text-fluid-xl font-medium leading-[0.9] tracking-tight">
                    {project.data.title}
                  </h2>
                  <p class="text-fluid-sm font-light italic max-w-2xl text-[#E5E5E5]/90">
                    {project.data.description}
                  </p>
                </div>
                <div class="flex flex-wrap gap-[clamp(6px,1vw,12px)]">
                  {project.data.tags.map((tag: string) => (
                    <span class="px-3 py-1.5 rounded-full border border-[#E5E5E5]/20 text-[#E5E5E5]/60 text-fluid-xs">
                      {tag}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </div>
  </main>

  <Footer />
</Layout>

<script>
  const initFilter = () => {
    const filterBtns = document.querySelectorAll('.filter-btn');
    const projects = document.querySelectorAll('.project-item');
    // Initialisiere mit allen Projekten als sichtbar
    let currentlyVisible = new Set<Element>(projects);

    filterBtns.forEach(btn => {
      btn.addEventListener('click', () => {
        filterBtns.forEach(b => b.classList.remove('active'));
        btn.classList.add('active');

        const filterValue = btn.getAttribute('data-filter') || 'all';
        let newlyVisible = new Set<Element>();
        let toHide = new Set<Element>();
        let toShow = new Set<Element>();

        // Wenn "Alle" geklickt wird, spezielle Behandlung
        if (filterValue === 'all') {
            projects.forEach((project) => {
              (project as HTMLElement).style.display = 'block';
            });
          
          gsap.fromTo(projects,
            {
              opacity: 0,
              y: 30,
              scale: 0.95
            },
            {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.8,
              ease: 'power2.out',
              stagger: {
                amount: 0.3,
                from: "start"
              },
              clearProps: "all"
            }
          );
          
          currentlyVisible = new Set<Element>(projects);
          return;
        }

        projects.forEach((project) => {
          const categories = (project as HTMLElement).getAttribute('data-categories')?.split(',') ?? [];
          const shouldBeVisible = filterValue === 'all' || categories.includes(filterValue);
          
          if (shouldBeVisible) {
            newlyVisible.add(project);
            // Wenn es vorher nicht sichtbar war, muss es eingeblendet werden
            if (!currentlyVisible.has(project)) {
              toShow.add(project);
            }
          } else if (currentlyVisible.has(project)) {
            // Wenn es vorher sichtbar war, muss es ausgeblendet werden
            toHide.add(project);
          }
        });

        // Nur die Elemente ausblenden, die wirklich versteckt werden m端ssen
        if (toHide.size > 0) {
          gsap.to(Array.from(toHide), {
            opacity: 0,
            y: 30,
            scale: 0.95,
            duration: 0.5,
            ease: 'power2.inOut',
            stagger: {
              amount: 0.2,
              from: "random"
            },
            onComplete: () => {
              toHide.forEach((project) => {
                (project as HTMLElement).style.display = 'none';
              });
              
              // Nur neue Elemente einblenden
              if (toShow.size > 0) {
                Array.from(toShow).forEach((project) => {
                  (project as HTMLElement).style.display = 'block';
                });
              
                gsap.fromTo(Array.from(toShow),
                  {
                    opacity: 0,
                    y: 50,
                    scale: 0.95
                  },
                  {
                    opacity: 1,
                    y: 0,
                    scale: 1,
                    duration: 0.8,
                    ease: 'power2.out',
                    stagger: {
                      amount: 0.3,
                      from: "start"
                    },
                    clearProps: "all"
                  }
                );
              }
            }
          });
        } else if (toShow.size > 0) {
          // Wenn nichts ausgeblendet werden muss, aber neue Elemente angezeigt werden sollen
          Array.from(toShow).forEach((project) => {
            (project as HTMLElement).style.display = 'block';
          });
          
          gsap.fromTo(Array.from(toShow),
            {
              opacity: 0,
              y: 50,
              scale: 0.95
            },
            {
              opacity: 1,
              y: 0,
              scale: 1,
              duration: 0.8,
              ease: 'power2.out',
              stagger: {
                amount: 0.3,
                from: "start"
              },
              clearProps: "all"
            }
          );
        }

        // Update currently visible projects
        currentlyVisible = newlyVisible;
      });
    });
  };

  window.addEventListener('load', initFilter);
</script>

<style>
  .filter-btn.active {
    @apply border-accent text-accent;
  }

  .project-item {
    will-change: transform, opacity;
  }
</style> 