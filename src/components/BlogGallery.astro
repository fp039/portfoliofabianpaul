---
import { getAssetPath } from '../utils/paths';

interface Props {
  images: string[];
  layout?: 'slider' | 'grid';
  orientation?: 'landscape' | 'portrait';
  className?: string;
}

const { images, layout = 'grid', orientation = 'landscape', className = '' } = Astro.props;

// Verarbeite alle Bildpfade
const processedImages = images.map(image => getAssetPath(image));
---

{layout === 'grid' ? (
  <div class="grid grid-cols-2 md:grid-cols-3 gap-4 my-8">
    {processedImages.map((image) => (
      <div class={`aspect-3-2 overflow-hidden ${orientation === 'portrait' ? 'aspect-3-4' : ''}`}>
        <img src={image} alt="" class="w-full h-full object-cover" loading="lazy" />
      </div>
    ))}
  </div>
) : (
  <div class:list={[
    'my-12 relative',
    className,
    'max-w-7xl mx-auto'
  ]}>
    <div class="gallery-slider relative">
      <div class="gallery-container">
        <div class="gallery-track flex transition-transform duration-700 ease-out">
          {processedImages.map((image) => (
            <div class="gallery-slide w-full flex-shrink-0">
              <div class="aspect-[16/9] relative overflow-hidden">
                <div class="absolute inset-0 flex items-center justify-center">
                  <img
                    src={image}
                    alt=""
                    class="h-full w-auto max-w-none hover:scale-[1.02] transition-transform duration-700"
                    loading="lazy"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
      
      {processedImages.length > 1 && (
        <>
          <button 
            class="gallery-prev absolute left-8 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center text-[#00FF00]/70 hover:text-[#00FF00] transition-colors"
            aria-label="Vorheriges Bild"
          >
            <svg class="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M15 19l-7-7 7-7"/>
            </svg>
          </button>
          
          <button 
            class="gallery-next absolute right-8 top-1/2 -translate-y-1/2 w-12 h-12 flex items-center justify-center text-[#00FF00]/70 hover:text-[#00FF00] transition-colors"
            aria-label="NÃ¤chstes Bild"
          >
            <svg class="w-8 h-8" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M9 5l7 7-7 7"/>
            </svg>
          </button>
        </>
      )}
    </div>
  </div>
)}

<style>
  .gallery-container {
    background: transparent;
  }
  
  .gallery-slide img {
    object-fit: contain;
  }

  .gallery-container::before,
  .gallery-container::after {
    display: none;
  }
</style>

<script>
  class GallerySlider {
    container: HTMLElement;
    track: HTMLElement;
    slides: HTMLElement[];
    prevBtn: HTMLElement | null;
    nextBtn: HTMLElement | null;
    currentIndex: number = 0;

    constructor(container: HTMLElement) {
      this.container = container;
      this.track = container.querySelector('.gallery-track') as HTMLElement;
      this.slides = Array.from(container.querySelectorAll('.gallery-slide'));
      this.prevBtn = container.querySelector('.gallery-prev');
      this.nextBtn = container.querySelector('.gallery-next');
      
      this.init();
    }

    init() {
      if (this.slides.length <= 1) return;

      this.updateNavigationVisibility();
      this.prevBtn?.addEventListener('click', () => this.prev());
      this.nextBtn?.addEventListener('click', () => this.next());
    }

    updateNavigationVisibility() {
      if (this.prevBtn) {
        this.prevBtn.style.display = this.currentIndex === 0 ? 'none' : 'flex';
      }
      if (this.nextBtn) {
        this.nextBtn.style.display = this.currentIndex === this.slides.length - 1 ? 'none' : 'flex';
      }
    }

    goTo(index: number) {
      this.currentIndex = index;
      this.track.style.transform = `translateX(-${index * 100}%)`;
      this.updateNavigationVisibility();
    }

    prev() {
      if (this.currentIndex > 0) {
        this.goTo(this.currentIndex - 1);
      }
    }

    next() {
      if (this.currentIndex < this.slides.length - 1) {
        this.goTo(this.currentIndex + 1);
      }
    }
  }

  function initGalleries() {
    document.querySelectorAll('.gallery-slider').forEach(container => {
      new GallerySlider(container as HTMLElement);
    });
  }

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initGalleries);
  } else {
    initGalleries();
  }

  // Initialize after Astro view transitions
  document.addEventListener('astro:page-load', initGalleries);
  document.addEventListener('astro:after-swap', initGalleries);
</script> 