---
import projectsData from '../../data/projects.json';
import { getRoutePath } from '../../utils/paths';
import { Image } from 'astro:assets';
import { projectImages } from '../../utils/projectImages';

// Konvertiere die Bildpfade und Links
const projects = projectsData.projects.map(project => {
  // Bestimme den Projektnamen aus dem Bildpfad
  const projectKey = project.image.split('/').slice(-2)[0].replace('_web', '') as keyof typeof projectImages;
  return {
    ...project,
    imageData: projectImages[projectKey]?.header,
    link: getRoutePath(project.link)
  };
});
---

<section class="relative bg-[#E5E5E5] min-h-screen flex flex-col" id="projects">
  <div class="pl-[clamp(20px,5vw,55px)] flex-1 flex flex-col py-24">
    <!-- Section Header mit Pfeil -->
    <div class="mb-[clamp(32px,8vh,64px)] flex justify-between items-start pr-[clamp(20px,5vw,55px)]">
      <h2>
        <span class="block text-fluid-base italic font-medium text-black leading-[1.5]">
          FEATURED
        </span>
        <span class="block text-fluid-2xl font-medium text-black leading-[1.1] tracking-[0.02em]">
          Projects
        </span>
      </h2>

      <!-- Scroll Arrow als Drag Handle - Neu positioniert -->
      <div 
        class="cursor-grab active:cursor-grabbing pt-2 group relative" 
        id="scroll-handle"
      >
        <!-- Tooltip - Neu positioniert -->
        <div class="absolute left-0 top-1/2 -translate-y-1/2 -translate-x-[calc(100%+10px)]
                    opacity-0 group-hover:opacity-100
                    transition-all duration-300 pointer-events-none
                    hidden md:block"
        >
          <span class="text-fluid-sm text-[#00FF00] whitespace-nowrap font-medium tracking-wider uppercase">
            Drag
          </span>
        </div>

        <svg 
          width="130" 
          height="57" 
          viewBox="0 0 130 57" 
          fill="none" 
          xmlns="http://www.w3.org/2000/svg" 
          class="scroll-arrow transition-transform"
        >
          <path d="M0.958496 28.5786H128.867" stroke="#00FF00" stroke-width="5" stroke-miterlimit="10"/>
          <path d="M102.709 2L130 28.5788L102.709 55.2" stroke="#00FF00" stroke-width="5" stroke-miterlimit="10"/>
        </svg>
      </div>
    </div>

    <!-- Projects Container with Horizontal Scroll -->
    <div class="projects-scroll flex-1 relative" data-drag-scroll>
      <div class="absolute inset-0">
        <div class="h-full flex gap-[clamp(25px,4vw,50px)] pb-4">
          {projects.map((project) => (
            <a 
              href={project.link} 
              class={`group flex flex-col items-start gap-[clamp(15px,2.5vw,25px)] flex-shrink-0 ${
                project.type === 'featured' ? 'w-[clamp(500px,50vw,800px)]' : 'w-[clamp(300px,30vw,400px)]'
              }`}
            >
              <div class={`w-full overflow-hidden ${project.type === 'featured' ? 'aspect-2-1' : 'aspect-4-3'}`}>
                {project.imageData && (
                  <Image 
                    src={project.imageData}
                    alt={project.title}
                    width={project.type === 'featured' ? 1600 : 800}
                    height={project.type === 'featured' ? 800 : 600}
                    class="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                    format="webp"
                    quality={85}
                  />
                )}
              </div>
              <div class="space-y-[clamp(8px,1.5vw,16px)]">
                <h3 class="text-fluid-xl font-medium leading-tight tracking-[0.02em] text-[#1D1D1B]">
                  {project.title}
                </h3>
                <p class="text-fluid-sm font-light leading-snug text-[#1D1D1B]">
                  {project.description}
                </p>
              </div>
            </a>
          ))}
        </div>
      </div>
    </div>
  </div>
</section>

<script>
  class ScrollHandle {
    private handle: HTMLElement | null = null;
    private container: HTMLElement | null = null;
    private isDown: boolean = false;
    private startX: number = 0;
    private scrollLeft: number = 0;
    private dragVelocity: number = 2;

    constructor() {
      requestAnimationFrame(() => {
        this.init();
      });
    }

    init() {
      this.handle = document.getElementById('scroll-handle');
      this.container = document.querySelector('.projects-scroll > div');
      
      if (!this.handle || !this.container) {
        return;
      }

      this.onMouseDown = this.onMouseDown.bind(this);
      this.onMouseMove = this.onMouseMove.bind(this);
      this.onMouseUp = this.onMouseUp.bind(this);
      this.onMouseEnter = this.onMouseEnter.bind(this);
      this.onMouseLeave = this.onMouseLeave.bind(this);

      this.addEventListeners();
    }

    addEventListeners() {
      if (!this.handle) return;
      
      this.handle.addEventListener('mousedown', this.onMouseDown);
      document.addEventListener('mousemove', this.onMouseMove);
      document.addEventListener('mouseup', this.onMouseUp);
      this.handle.addEventListener('mouseenter', this.onMouseEnter);
      this.handle.addEventListener('mouseleave', this.onMouseLeave);
    }

    onMouseDown(e: MouseEvent) {
      if (!this.handle || !this.container) return;
      
      this.isDown = true;
      this.startX = e.pageX - this.handle.offsetLeft;
      this.scrollLeft = this.container.scrollLeft;
    }

    onMouseMove(e: MouseEvent) {
      if (!this.isDown || !this.handle || !this.container) return;

      e.preventDefault();
      const x = e.pageX - this.handle.offsetLeft;
      const walk = (x - this.startX) * this.dragVelocity;
      this.container.scrollLeft = this.scrollLeft - walk;
    }

    onMouseUp() {
      this.isDown = false;
    }

    onMouseEnter() {
      if (!this.handle) return;
      this.handle.style.cursor = 'grab';
    }

    onMouseLeave() {
      if (!this.handle) return;
      this.handle.style.cursor = 'auto';
    }

    destroy() {
      if (!this.handle) return;
      
      this.handle.removeEventListener('mousedown', this.onMouseDown);
      document.removeEventListener('mousemove', this.onMouseMove);
      document.removeEventListener('mouseup', this.onMouseUp);
      this.handle.removeEventListener('mouseenter', this.onMouseEnter);
      this.handle.removeEventListener('mouseleave', this.onMouseLeave);
    }
  }

  let scrollHandleInstance: ScrollHandle | null = null;

  // Initialization function
  const initScrollHandle = () => {
    if (scrollHandleInstance) {
      scrollHandleInstance.destroy();
    }
    scrollHandleInstance = new ScrollHandle();
  };

  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initScrollHandle);
  } else {
    initScrollHandle();
  }

  // Astro View Transitions
  document.addEventListener('astro:after-swap', initScrollHandle);
</script>

<style>
  .projects-scroll {
    ovelow: hidden;
  }

  .projects-scroll > div {
    overflow-x: scroll;
    overflow-y: hidden;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .projects-scroll > div::-webkit-scrollbar {
    display: none;
  }

  /* Arrow animation */
  .scroll-arrow {
    animation: arrowMove 1.5s ease-in-out infinite;
    will-change: transform;
  }

  @keyframes arrowMove {
    0% { transform: translateX(0); }
    50% { transform: translateX(10px); }
    100% { transform: translateX(0); }
  }

  #scroll-handle {
    user-select: none;
    -webkit-user-select: none;
    touch-action: none;
    will-change: transform;
    z-index: 10;
  }

  #scroll-handle:hover {
    transform: scale(1.05);
    transition: transform 0.2s ease;
  }

  #scroll-handle.active {
    transform: scale(0.95);
    transition: transform 0.2s ease;
  }

  /* Mobile Touch Support */
  @media (hover: none) and (pointer: coarse) {
    .projects-scroll > div {
      scroll-snap-type: x mandatory;
    }
    
    .projects-scroll > div > a {
      scroll-snap-align: start;
    }
  }

  /* Tooltip Animation verfeinern */
  @media (hover: hover) {
    #scroll-handle:hover .scroll-arrow {
      animation-play-state: paused;
    }
    
    #scroll-handle > div {
      transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    }
  }

  /* Tooltip auf Touch-GerÃ¤ten ausblenden */
  @media (hover: none) {
    #scroll-handle > div:first-child {
      display: none;
    }
  }
</style>