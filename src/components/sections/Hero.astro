---
import RotatingCircle from '../ui/RotatingCircle.astro';
import ScrollIndicator from '../ui/ScrollIndicator.astro';
import { getAssetPath } from '../../utils/paths';
import { getCollection } from 'astro:content';
import sharp from 'sharp';
import path from 'path';

// Hilfsfunktion zum Analysieren der Bilddimensionen
async function isHorizontalImage(imagePath: string): Promise<boolean> {
  try {
    const fullPath = path.join(process.cwd(), 'public', imagePath);
    const metadata = await sharp(fullPath).metadata();
    return metadata.width && metadata.height ? metadata.width > metadata.height : false;
  } catch (error) {
    console.error(`Fehler beim Analysieren des Bildes ${imagePath}:`, error);
    return false;
  }
}

// Lade alle Projekte
const projects = await getCollection('projects');

// Filtere horizontale Bilder aus den Projekten
const horizontalImages = await Promise.all(
  projects
    .flatMap(project => [
      project.data.image,
      ...(project.data.gallery || [])
    ])
    .map(async (img) => {
      const isHorizontal = await isHorizontalImage(img);
      return isHorizontal ? img : null;
    })
);

// Filtere null-Werte und behalte nur horizontale Bilder
const filteredImages = horizontalImages.filter((img): img is string => img !== null);

// Define image sets for each position
const imageGroups = {
  topLeft: [
    getAssetPath('/images/shared/gin-fischer-1920x1080.jpg'),
    getAssetPath('/images/shared/website-wontec-2000x1125.png'),
    getAssetPath('/images/shared/gin-fischer-1920x1080-2.jpg'),
    ...filteredImages.slice(0, 3).map(img => getAssetPath(img))
  ],
  topRight: [
    getAssetPath('/images/shared/guest-journey-harbr-2000x1125.jpg'),
    getAssetPath('/images/shared/wondera-wontec-2000x1125.png'),
    getAssetPath('/images/shared/work-hard-2000x1125.jpg'),
    ...filteredImages.slice(3, 6).map(img => getAssetPath(img))
  ],
  bottomLeft: [
    getAssetPath('/images/shared/rose-steillagen-2000x1125.jpg'),
    getAssetPath('/images/shared/rose-steillagen-2000x1125-2.jpg'),
    getAssetPath('/images/shared/rose-steillagen-2000x1125-3.png'),
    ...filteredImages.slice(6, 9).map(img => getAssetPath(img))
  ],
  bottomRight: [
    getAssetPath('/images/shared/rose-steillagen-2000x1125-2.jpg'),
    getAssetPath('/images/shared/rose-steillagen-2000x1125-3.png'),
    ...filteredImages.slice(9, 11).map(img => getAssetPath(img))
  ],
};
---

<section class="min-h-screen relative px-8 pb-0 flex flex-col">
  <div class="flex-1 flex items-center justify-center py-32">
    <div class="max-w-7xl mx-auto w-full relative">
      <!-- Main Heading -->
      <div class="text-center">
        <h1 class="flex flex-col gap-4 leading-none tracking-[0.02em]">
          <!-- Digital + Image -->
          <div class="flex flex-col md:flex-row items-center justify-center gap-6 lg:gap-10">
            <!-- Mobile: Image nach oben und zum Rand gepusht -->
            <div class="absolute -top-[130px] -left-8 md:relative md:top-0 md:left-0 w-[clamp(140px,45vw,220px)] md:w-[clamp(100px,20vw,220px)] aspect-video overflow-hidden">
              {imageGroups.topLeft.map((src, index) => (
                <img 
                  src={src}
                  alt="Project Image"
                  class={`absolute inset-0 w-full h-full object-cover bg-background/20 opacity-0 ${index === 0 ? 'opacity-100' : ''}`}
                  data-image-group="topLeft"
                  data-image-index={index}
                />
              ))}
            </div>
            <span 
              class="text-transparent [-webkit-text-stroke:1px_#0F0] uppercase text-balance" 
              style="font-size: clamp(3rem, 8vw, 7.383rem); font-weight: 500;"
            >
              Digital
            </span>
          </div>

          <!-- Experiences -->
          <div class="flex items-center justify-center">
            <span class="text-[#0F0] [-webkit-text-stroke:1px_#0F0] uppercase text-balance" style="font-size: clamp(3rem, 8vw, 7.383rem); font-weight: 500;">
              Experiences
            </span>
            <!-- Bild nur auf Desktop sichtbar -->
            <div class="ml-10 hidden md:block relative w-[clamp(100px,20vw,220px)] aspect-video overflow-hidden">
              {imageGroups.topRight.map((src, index) => (
                <img 
                  src={src}
                  alt="Project Image"
                  class={`absolute  inset-0 w-full h-full object-cover bg-background/20 opacity-0 ${index === 0 ? 'opacity-100' : ''}`}
                  data-image-group="topRight"
                  data-image-index={index}
                />
              ))}
            </div>
          </div>

          <!-- & Creative -->
          <div class="flex items-center justify-center">
            <!-- Bild nur auf Desktop sichtbar -->
            <div class="hidden md:block relative w-[clamp(100px,20vw,220px)] aspect-video overflow-hidden mr-10">
              {imageGroups.bottomLeft.map((src, index) => (
                <img 
                  src={src}
                  alt="Project Image"
                  class={`absolute inset-0 w-full h-full object-cover bg-background/20 opacity-0 ${index === 0 ? 'opacity-100' : ''}`}
                  data-image-group="bottomLeft"
                  data-image-index={index}
                />
              ))}
            </div>
            <span class="text-[#E5E5E5] uppercase text-balance" style="font-size: clamp(3rem, 8vw, 7.383rem); font-weight: 500;">
              & Creative
            </span>
          </div>

          <!-- Branding + Image -->
          <div class="flex flex-col md:flex-row items-center justify-center gap-6 lg:gap-10 relative">
            <span 
              class="text-transparent [-webkit-text-stroke:1px_#E5E5E5] uppercase text-balance" 
              style="font-size: clamp(3rem, 8vw, 7.383rem); font-weight: 500;"
            >
              Branding
            </span>
            <!-- Mobile: Bild nach unten und zum Rand gepusht -->
            <div class="absolute -bottom-[130px] -right-8 md:relative md:bottom-0 md:right-0 w-[clamp(140px,45vw,220px)] md:w-[clamp(100px,20vw,220px)] aspect-video overflow-hidden">
              {imageGroups.bottomRight.map((src, index) => (
                <img 
                  src={src}
                  alt="Project Image"
                  class={`absolute inset-0 w-full h-full object-cover bg-background/20 opacity-0 ${index === 0 ? 'opacity-100' : ''}`}
                  data-image-group="bottomRight"
                  data-image-index={index}
                />
              ))}
            </div>
          </div>
        </h1>
      </div>
    </div>
  </div>
  
  <div class="pb-5 md:pb-0">
    <ScrollIndicator />
  </div>
</section>

<script>
  type ImageGroup = 'topLeft' | 'topRight' | 'bottomLeft' | 'bottomRight';
  type CurrentIndices = Record<ImageGroup, number>;

  const initImageSwitching = () => {
    const groups: ImageGroup[] = ['topLeft', 'topRight', 'bottomLeft', 'bottomRight'];
    const currentIndices: CurrentIndices = {
      topLeft: 0,
      topRight: 0,
      bottomLeft: 0,
      bottomRight: 0
    };

    const switchImage = (group: ImageGroup) => {
      const images = document.querySelectorAll(`[data-image-group="${group}"]`);
      const currentIndex = currentIndices[group];
      const nextIndex = (currentIndex + 1) % images.length;

      // Fade out current image
      gsap.to(images[currentIndex], {
        opacity: 0,
        duration: 0.5,
        ease: "power2.inOut"
      });

      // Fade in next image
      gsap.to(images[nextIndex], {
        opacity: 1,
        duration: 0.5,
        ease: "power2.inOut"
      });

      currentIndices[group] = nextIndex;
    };

    // Start the switching cycle for each group with different delays
    groups.forEach((group, index) => {
      setInterval(() => switchImage(group), 3000 + (index * 750));
    });
  };

  // Initialize when the document is ready
  window.addEventListener('load', initImageSwitching);
</script>

<style>
  img {
    display: block;
    transition: opacity 0.5s ease-in-out;
  }

  /* Ensure text remains readable at all sizes */
  span {
    line-height: 1.1;
    letter-spacing: clamp(0.02em, 0.5vw, 0.04em);
  }

  /* Optimize spacing for different screen sizes */
  @media (max-width: 768px) {
    .gap-6 {
      gap: clamp(1rem, 3vw, 1.5rem);
    }
  }
</style>